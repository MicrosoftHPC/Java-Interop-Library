//-----------------------------------------------------------------------
// <copyright file="Utility.java" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// <summary>
//    Utility class for EchoSvc
// </summary>
// <author>Jiabin Hu</author>
//-----------------------------------------------------------------------

package org.tempuri;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.UUID;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.Duration;
import javax.annotation.Resource;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

import org.apache.cxf.headers.Header;
import org.apache.cxf.helpers.CastUtils;
import org.apache.cxf.jaxws.context.WrappedMessageContext;
import org.apache.cxf.message.Message;
import org.datacontract.schemas._2004._07.services.ClassObj;
import org.datacontract.schemas._2004._07.services.ComputerInfo;
import org.datacontract.schemas._2004._07.services.StatisticInfo;
import org.datacontract.schemas._2004._07.services.Sub;
import org.datacontract.schemas._2004._07.services.TestStruct;
import org.datacontract.schemas._2004._07.system.ArgumentException;
import org.datacontract.schemas._2004._07.system.ArgumentNullException;
import org.datacontract.schemas._2004._07.system.DivideByZeroException;
import org.datacontract.schemas._2004._07.system.OutOfMemoryException;
import org.w3c.dom.Element;

import com.microsoft.hpc.scheduler.session.Constant;
import com.microsoft.hpc.scheduler.session.DataClient;
import com.microsoft.hpc.scheduler.session.servicecontext.Environment;
import com.microsoft.hpc.scheduler.session.servicecontext.ServiceContext;
import com.microsoft.hpc.scheduler.session.servicecontext.ExitEventListener;
import com.microsoft.hpc.scheduler.session.servicecontext.SOAEventArg;
import com.microsoft.hpc.scheduler.session.servicecontext.Sender;
import com.microsoft.hpc.scheduler.session.servicecontext.etw.ETWTraceEvent;
import com.microsoft.hpc.scheduler.session.servicecontext.JavaTraceLevelConverterEnum;


import com.microsoft.hpc.session.RetryOperationError;
import com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfKeyValueOfstringstring.KeyValueOfstringstring;

/**
 * This class was generated by Apache CXF 2.3.3 2011-03-14T11:28:39.302+08:00
 * Generated source version: 2.3.3
 * 
 */

@javax.jws.WebService(
        serviceName = "ITestService",
        portName = "DefaultBinding_ITestService",
        targetNamespace = "http://tempuri.org/",
        wsdlLocation = "file:tempuri.org.wsdl",
        endpointInterface = "org.tempuri.ITestService")
public class ITestServiceImpl implements ITestService
{
    @Resource
    WebServiceContext wsContext;

    private static final Logger                                              LOG                           = Logger.getLogger(ITestServiceImpl.class
                                                                                                                   .getName());

    private static final int                                                 Default                       = 0;
    private static final int                                                 READ_AccessDenied             = 1;
    private static final int                                                 READ_AccessDenied_ReadBytes   = 2;
    private static final int                                                 No_Read_PerReq                = 3;
    private static final int                                                 Read_Raw_Bytes                = 4;
    private static final int                                                 No_Read_Raw_PerReq            = 5;

    private static int                                                       NonTerminatingErrorRetryCount = 0;
    private static Map<Integer, Integer>                                     failCount                     = new HashMap<Integer, Integer>();
    private static int                                                       taskid                        = -1;
    private static int                                                       jobid                         = -1;
    private static String                                                    scheduler;

    private static org.datacontract.schemas._2004._07.services.ObjectFactory svcObjFact                    = new org.datacontract.schemas._2004._07.services.ObjectFactory();

    private String                                                           logfile;
    private Object                                                           log                           = new Object();

    static
    {
        String dummy = System.getenv(EnvVarNames.CCP_TASKSYSTEMID);
        taskid = -1;
        if (!Utility.isNullOrEmpty(dummy))
        {
            try
            {
                taskid = Integer.parseInt(dummy);
            }
            catch (NumberFormatException e)
            {
                // taskid stays at -1;
            }
        }

        dummy = System.getenv(EnvVarNames.CCP_JOBID);
        jobid = -1;
        if (!Utility.isNullOrEmpty(dummy))
        {
            try
            {
                jobid = Integer.parseInt(dummy);
            }
            catch (NumberFormatException e)
            {
                // jobid stays at -1;
            }
        }

        dummy = System.getenv(EnvVarNames.LONG_LOADING_TEST);
        if (!Utility.isNullOrEmpty(dummy))
        {
            try
            {
                Thread.sleep(30 * 1000);
            }
            catch (InterruptedException e)
            {
                e.printStackTrace();
            }
        }

        scheduler = System.getenv(EnvVarNames.CCP_SCHEDULER);
        try
        {
            String logPath = System.getenv(EnvVarNames.GRACEFUL_EXIT);
            if (!Utility.isNullOrEmpty(logPath))
            {
                File baseDir = new File(logPath);
                File logDir = new File(baseDir, "CCP_AITest_Trace_" + jobid);
                File logFile = new File(logDir, taskid + ".txt");

                if (!System.getenv("CCP_OnAzure").equals("1"))
                {
                    try
                    {
                        logDir.mkdirs();
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
                    PrintWriter writer = new PrintWriter(new FileWriter(logFile, true));
                    writer.println(Utility.getCurrentTime() + ": Svchost starts.");
                    writer.close();
                }
                System.out.println(Utility.getCurrentTime() + ": Svchost starts.");

                ServiceContext.exitingEvents.addMyEventListener(new DefaultOnExitHandler(logFile));
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public ITestServiceImpl()
    {
        String dummy = System.getenv(EnvVarNames.LONG_LOADING_TEST);
        if (!Utility.isNullOrEmpty(dummy))
        {
            try
            {
                Thread.sleep(30 * 1000);
            }
            catch (InterruptedException e)
            {
                e.printStackTrace();
            }
        }
    }

    private synchronized void writeLog(String logDir, int refID, String msg, Object... args)
    {
        if (!Utility.isNullOrEmpty(logDir))
        {
            try
            {
                new File(logDir).mkdirs();
            }
            catch (Exception e)
            {
                System.out.println(e);
            }
            File logFileClass = new File(logDir, String.valueOf(refID) + ".txt");
            logfile = logFileClass.toString();

            try
            {
                PrintWriter writer = new PrintWriter(new FileWriter(logFileClass, true));
                writer.format(msg, args);
                writer.println();
                writer.close();
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
    }

    private void writeLog(int refID, String msg, Object... args)
    {
        String logDir = "\\\\" + scheduler + "\\CcpSpoolDir\\CCP_AITest_Trace_" + jobid;
        writeLog(logDir, refID, msg, args);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.tempuri.ITestService#echoObject2(org.datacontract.schemas._2004._07
     * .services.ClassObj obj )*
     */
    public org.datacontract.schemas._2004._07.services.ClassObj echoObject2(
            org.datacontract.schemas._2004._07.services.ClassObj obj)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoObject2");

        return obj;

    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoDouble(java.lang.Double inp )*
     */
    public java.lang.Double echoDouble(java.lang.Double inp)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoDouble");

        return inp;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoWithParam(java.lang.Integer refID
     * ,)java.lang.Double d ,)java.lang.Float f ,)java.lang.Long i64
     * ,)java.lang.Integer i321 ,)java.lang.Integer i322
     * ,)org.datacontract.schemas._2004._07.services.TestEnum e
     * ,)java.lang.String s )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoWithParam(
            java.lang.Integer refID, java.lang.Double d, java.lang.Float f, java.lang.Long i64,
            java.lang.Integer i321, java.lang.Integer i322,
            org.datacontract.schemas._2004._07.services.TestEnum e, java.lang.String s)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoWithParam");
        try
        {
            TestStruct ts = new TestStruct();
            ts.setD(d);
            ts.setF(f);
            ts.setI64(i64);
            ts.setI321(i321);
            ts.setI322(i322);
            ts.setE(e);
            ts.setS(svcObjFact.createTestStructS(s));

            Sub sub = new Sub();
            sub.setSubE(e);
            sub.setSubF(f);
            sub.setSubI(i321);
            sub.setSubS(svcObjFact.createSubSubS(s));

            ComputerInfo info = new ComputerInfo();

            info.setRefID(refID);
            String computername = InetAddress.getLocalHost().getHostName();
            info.setName(svcObjFact.createComputerInfoName(computername));
            info.setJobID(jobid);
            info.setTaskID(taskid);
            info.setScheduler(svcObjFact.createComputerInfoScheduler(scheduler));
            info.setCallIn(Utility.getXMLCurrentTime());

            info.setTs(ts);
            org.datacontract.schemas._2004._07.services.ObjectFactory fact = new org.datacontract.schemas._2004._07.services.ObjectFactory();
            info.setSub(fact.createComputerInfoSub(sub));

            return info;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoObject(java.lang.String type
     * ,)java.lang.Object o )*
     */
    public java.lang.Object echoObject(java.lang.String type, java.lang.Object o)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoObject");

        return o;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoStruct(java.lang.Integer refID
     * ,)org.datacontract.schemas._2004._07.services.TestStruct s )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoStruct(
            java.lang.Integer refID, org.datacontract.schemas._2004._07.services.TestStruct s)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoStruct");
        try
        {
            ComputerInfo info = new ComputerInfo();

            info.setRefID(refID);
            String computername = InetAddress.getLocalHost().getHostName();
            info.setName(svcObjFact.createComputerInfoName(computername));
            info.setJobID(jobid);
            info.setTaskID(taskid);
            info.setScheduler(svcObjFact.createComputerInfoScheduler(scheduler));
            info.setCallIn(Utility.getXMLCurrentTime());

            info.setTs(s);
            return info;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.tempuri.ITestService#echoClass(org.datacontract.schemas._2004._07
     * .services.ClassFoo cls )*
     */
    public org.datacontract.schemas._2004._07.services.ClassFoo echoClass(
            org.datacontract.schemas._2004._07.services.ClassFoo cls)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoClass");

        return cls;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#serviceSideAsyncEcho(java.lang.Integer
     * refID )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo serviceSideAsyncEcho(
            java.lang.Integer refID)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation serviceSideAsyncEcho");

        return new org.datacontract.schemas._2004._07.services.ComputerInfo();
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#serializationTest(byte[] stream )*
     */
    public java.lang.Boolean serializationTest(byte[] stream)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation serializationTest");
        try
        {
            java.lang.Boolean _return = null;
            return _return;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see org.tempuri.ITestService#trace(java.lang.Integer  refID ,)com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfstring  traceMsgs ,)javax.xml.datatype.Duration  sleepBeforeTrace ,)javax.xml.datatype.Duration  sleepAfterTrace ,)java.lang.Integer  testActionId )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo trace(java.lang.Integer refID,com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfstring traceMsgs,javax.xml.datatype.Duration sleepBeforeTrace,javax.xml.datatype.Duration sleepAfterTrace,java.lang.Integer testActionId) throws ITestServiceTraceRetryOperationErrorFaultFaultMessage , ITestServiceTraceOutOfMemoryExceptionFaultFaultMessage    { 
        LOG.info("Executing operation trace");
        ETWTraceEvent etw = new ETWTraceEvent(wsContext);
        etw.TraceEvent(JavaTraceLevelConverterEnum.Verbose, refID, "[HpcServiceHost]: Request is received.");
        Date callIn = new Date();
        
        etw.TraceEvent(JavaTraceLevelConverterEnum.Verbose, refID, "CallIn:" + callIn.toString());
        ComputerInfo info = buildComputerInfo(refID);
        
        try {
            info.setCallIn(Utility.convertXMLGregorianCalendar(callIn));
        } catch (DatatypeConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceFaultException) {
            etw.TraceEvent(JavaTraceLevelConverterEnum.Error, refID, "ThrowFaultException");
            etw.TraceEvent(JavaTraceLevelConverterEnum.Verbose, refID, "[HpcServiceHost]: Response is sent back. IsFault = True");
            OutOfMemoryException err = new OutOfMemoryException();
            throw new ITestServiceTraceOutOfMemoryExceptionFaultFaultMessage("Testing fault.", err);
            
        } else if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.RetryOperationError) {
            etw.TraceEvent(JavaTraceLevelConverterEnum.Error, refID, "ThrowRetryOperationError");
            etw.TraceEvent(JavaTraceLevelConverterEnum.Verbose, refID, "[HpcServiceHost]: Response is sent back. IsFault = True");
            RetryOperationError err = new RetryOperationError();
            throw new ITestServiceTraceRetryOperationErrorFaultFaultMessage("Testting RetryOperationError.", err);
        } else if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceProcessExit) {
            etw.TraceEvent(JavaTraceLevelConverterEnum.Error, refID, "ProcessExit");
            etw.Flush();
            Utility.sleep(20 * 1000);
            Runtime.getRuntime().exit(refID);
//            System.exit(refID);
        } else if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.NoUserTrace) {
            try {
                info.setCallOut(Utility.convertXMLGregorianCalendar(new Date()));
                etw.TraceEvent(JavaTraceLevelConverterEnum.Verbose, refID, "CallOut:" + info.getCallOut().toString());
                return info;
            } catch (DatatypeConfigurationException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        try {
            Thread.sleep(sleepBeforeTrace.getTimeInMillis(new Date()));
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        int count = 1;
        if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceLargeAmount) {
            count = 10000 / traceMsgs.getString().size();
        }
        for(int i = 0; i < count; i++) {
            for(String traceMsg : traceMsgs.getString()) {
                String[] splitters = traceMsg.split("\\|", 5);
                int iTracingType = Integer.parseInt(splitters[0]);
                int iEventType = Integer.parseInt(splitters[1]);
                int eventId = Integer.parseInt(splitters[2]);
                int sleepTime = Integer.parseInt(splitters[3]);
                String msg = splitters[4];
                TracingType tracingType = TracingType.fromInteger(iTracingType);
                JavaTraceLevelConverterEnum eventType = JavaTraceLevelConverterEnum.convertFromInteger(iEventType);
                if(tracingType == TracingType.TraceEvent) {
                    etw.TraceEvent(eventType, eventId, msg);
                    if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceRequestProcessing) {
                        etw.Flush();
                    }
                } else if(tracingType == TracingType.TraceInformation) {
                    etw.TraceInformation(msg);
                    if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceRequestProcessing) {
                        etw.Flush();
                    }
                } else if(tracingType == TracingType.TraceData) {
                    if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceBigSize) {
                        StringBuffer data = new StringBuffer();
                        for (int j = 0; j < 63 * 512; j++) {
                            data.append('0');
                        }
                        etw.TraceData(eventType, eventId, data);
                        if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceRequestProcessing) {
                            etw.Flush();
                        }
                        for (int j = 0; j < 2 * 512; j++) {
                            data.append('1');
                        }
                        etw.TraceData(eventType, eventId, data);
                        if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceRequestProcessing) {
                            etw.Flush();
                        }
                    } else {
                        TraceDataObj data = new TraceDataObj(msg);
                        etw.TraceData(eventType, eventId, data);
                        if(TracingTestActionId.fromInteger(testActionId) == TracingTestActionId.TraceRequestProcessing) {
                            etw.Flush();
                        }
                    }
                } else if(tracingType == TracingType.TraceTransfer) {
                    etw.TraceTransfer(eventId, msg, UUID.randomUUID());
                }
                Utility.sleep(sleepTime);
            }
            
        }
        Utility.sleep(sleepAfterTrace.getTimeInMillis(new Date()));
        try {
            info.setCallOut(Utility.convertXMLGregorianCalendar(new Date()));
        } catch (DatatypeConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        etw.TraceEvent(JavaTraceLevelConverterEnum.Verbose, refID, "CallOut:" + info.getCallOut().toString());
        etw.TraceEvent(JavaTraceLevelConverterEnum.Verbose, refID, "[HpcServiceHost]: Response is sent back. IsFault = False");
        return info;
    }


    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#runInprocSoaJob(*
     */
    public java.lang.String runInprocSoaJob()
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation runInprocSoaJob");
        try
        {
            java.lang.String _return = "";
            return _return;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoObject3(java.lang.String type
     * ,)java.lang.Object o )*
     */
    public java.lang.Object echoObject3(java.lang.String type, java.lang.Object o)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoObject3");

        return type;
    }



    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#ping(*
     */
    public java.lang.Boolean ping()
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation ping");
        try
        {
            PrintWriter writer = null;
            if (!Utility.isNullOrEmpty(logfile))
            {
                writer = new PrintWriter(new FileWriter(new File(logfile), true));
            }

            if (writer != null)
            {
                writer.println("Incoming ping! Pong!");
            }

            return true;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#generateLoadWithInputFile(java.lang.Integer
     * refID ,)java.lang.Long millisec ,)java.lang.String inputDataPath
     * ,)java.lang.String commonDataPath )*
     */
    public org.datacontract.schemas._2004._07.services.StatisticInfo generateLoadWithInputFile(
            java.lang.Integer refID, java.lang.Long millisec, java.lang.String inputDataPath,
            java.lang.String commonDataPath)
    {
        ServiceContext.Logger
                .traceEvent(Level.ALL, "Executing operation generateLoadWithInputFile");
        try
        {
            return new org.datacontract.schemas._2004._07.services.StatisticInfo();
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.tempuri.ITestService#echoWithDelayOnSelectedNode(java.lang.Integer
     * refID ,)java.lang.String selectedNode ,)javax.xml.datatype.Duration
     * delayOnSelectedNode ,)javax.xml.datatype.Duration delayOnOtherNodes )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoWithDelayOnSelectedNode(
            java.lang.Integer refID, java.lang.String selectedNode,
            javax.xml.datatype.Duration delayOnSelectedNode,
            javax.xml.datatype.Duration delayOnOtherNodes)
    {
        ServiceContext.Logger.traceEvent(Level.ALL,
                "Executing operation echoWithDelayOnSelectedNode");
        try
        {
            String machine;
            try
            {
                machine = InetAddress.getLocalHost().getHostName();
            }
            catch (Exception e)
            {
                machine = "";
            }

            if (machine.compareToIgnoreCase(selectedNode) == 0)
            {
                return echoWithDelay(refID, delayOnSelectedNode);
            }
            else
            {
                return echoWithDelay(refID, delayOnOtherNodes);
            }
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#kill(*
     */
    public void kill()
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation kill");
        try
        {
            System.exit(0);
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoFaultWithName(java.lang.Integer refID
     * ,)java.lang.String exceptionName )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoFaultWithName(
            java.lang.Integer refID, java.lang.String exceptionName)
            throws ITestServiceEchoFaultWithNameExceptionFaultFaultMessage,
            ITestServiceEchoFaultWithNameArgumentNullExceptionFaultFaultMessage,
            ITestServiceEchoFaultWithNameOutOfMemoryExceptionFaultFaultMessage,
            ITestServiceEchoFaultWithNameDivideByZeroExceptionFaultFaultMessage
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoFaultWithName");

        String lowercaseName = exceptionName.toLowerCase();
        if (lowercaseName.equals("threadabortexception"))
        {
            // Unable to migrate.
            System.exit(1);
        }
        else if (lowercaseName.equals("outofmemoryexception"))
        {
            OutOfMemoryException err = new OutOfMemoryException();
            throw new ITestServiceEchoFaultWithNameOutOfMemoryExceptionFaultFaultMessage(
                    "Testing fault.", err);
        }
        else if (lowercaseName.equals("dividebyzeroexception"))
        {
            DivideByZeroException err = new DivideByZeroException();
            throw new ITestServiceEchoFaultWithNameDivideByZeroExceptionFaultFaultMessage(
                    "Testing fault.", err);
        }
        else if (lowercaseName.equals("argumentexception"))
        {
            // TODO: expose it in contract.
        }
        else if (lowercaseName.equals("argumentnullexception"))
        {
            ArgumentNullException err = new ArgumentNullException();
            throw new ITestServiceEchoFaultWithNameArgumentNullExceptionFaultFaultMessage(
                    "Testing fault.", err);
        }
        else
        {
            org.datacontract.schemas._2004._07.system.Exception err = new org.datacontract.schemas._2004._07.system.Exception();
            throw new ITestServiceEchoFaultWithNameExceptionFaultFaultMessage("Testing fault.", err);
        }

        // should never be executed
        return new ComputerInfo();
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoWithFail(java.lang.Integer refID
     * ,)java.lang.Integer failTime )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoWithFail(
            java.lang.Integer refID, java.lang.Integer failTime)
            throws ITestServiceEchoWithFailAuthenticationFailureFaultFaultMessage,
            ITestServiceEchoWithFailRetryOperationErrorFaultFaultMessage
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoWithFail");

        try
        {
            if (failTime == 0)
            {
                return echo(refID);
            }
            String envPrefix = System.getenv(EnvVarNames.TEST_ECHO_FAIL);
            int i = 1;
            String envName = envPrefix + "-" + refID.toString();
            File envFile = new File(envName);
            String storeVal = null;
            try
            {
                Scanner reader = new Scanner(new BufferedReader(new FileReader(envFile)));
                storeVal = String.valueOf(reader.nextInt());
            }
            catch (Exception e)
            {
                storeVal = "0";
            }
            System.out.format("Get the env %s value: %s%n", envName, storeVal);
            i = Integer.parseInt(storeVal) + 1;

            PrintWriter writer = new PrintWriter(new FileWriter(envFile, false));
            writer.print(i);
            writer.close();

            if (i <= failTime)
            {
                System.out.println("Exiting...");
                System.exit(i);
            }
            return echo(refID);
        }
        catch (ITestServiceEchoAuthenticationFailureFaultFaultMessage e)
        {
            throw new ITestServiceEchoWithFailAuthenticationFailureFaultFaultMessage(
                    e.getMessage(), e.getFaultInfo());
        }
        catch (ITestServiceEchoRetryOperationErrorFaultFaultMessage e)
        {
            throw new ITestServiceEchoWithFailRetryOperationErrorFaultFaultMessage(e.getMessage(),
                    e.getFaultInfo());
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoWithOnExit(java.lang.Integer refID
     * ,)javax.xml.datatype.Duration runTime ,)javax.xml.datatype.Duration
     * exitDelay ,)java.lang.String logPath )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoWithOnExit(
            java.lang.Integer refID, javax.xml.datatype.Duration runTime,
            javax.xml.datatype.Duration exitDelay, java.lang.String logPath)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoWithOnExit");

        try
        {
            System.out.println("Start call " + refID.toString());
            ComputerInfo info = echo(refID);
            String taskInfo = String.format("%s.%s.%s", System.getenv(EnvVarNames.CCP_JOBID),
                    System.getenv(EnvVarNames.CCP_TASKID),
                    System.getenv(EnvVarNames.CCP_TASKINSTANCEID));
            boolean isOnAzure = System.getenv(EnvVarNames.CCP_ONAZURE) != null
                    && System.getenv(EnvVarNames.CCP_ONAZURE).equals("1");
            if (!isOnAzure && !Utility.isNullOrEmpty(logPath))
            {
                writeLog(logPath + "\\CCP_AITest_Trace_" + String.valueOf(jobid), refID,
                        "[Request] %s%%%s%%Svchost called.", Utility.getCurrentTime(), taskInfo);
            }
            System.out.format("[Request] %s%%%s%%Svchost called.%n", Utility.getCurrentTime(),
                    taskInfo);
            EchoWithOnExitHandler onExit = new EchoWithOnExitHandler(
                    exitDelay.getTimeInMillis(new Date()), logPath, refID, info);
            ServiceContext.exitingEvents.addMyEventListener(onExit);
            Thread.sleep(runTime.getTimeInMillis(new Date()));
            if (!info.isOnExitCalled())
            {
                ServiceContext.exitingEvents.removedMyEventListener(onExit);
            }
            return info;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoFault(java.lang.Integer refID
     * ,)org.datacontract.schemas._2004._07.system.Exception ex )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoFault(
            java.lang.Integer refID, org.datacontract.schemas._2004._07.system.Exception ex)
            throws ITestServiceEchoFaultExceptionFaultFaultMessage,
            ITestServiceEchoFaultArgumentNullExceptionFaultFaultMessage,
            ITestServiceEchoFaultOutOfMemoryExceptionFaultFaultMessage,
            ITestServiceEchoFaultDivideByZeroExceptionFaultFaultMessage
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoFault");

        if (ex != null)
        {
            if (ex instanceof OutOfMemoryException)
            {
                OutOfMemoryException err = new OutOfMemoryException();
                throw new ITestServiceEchoFaultOutOfMemoryExceptionFaultFaultMessage(
                        "Testing fault.", err);
            }
            else if (ex instanceof DivideByZeroException)
            {
                DivideByZeroException err = new DivideByZeroException();
                throw new ITestServiceEchoFaultDivideByZeroExceptionFaultFaultMessage(
                        "Testing fault.", err);
            }
            else if (ex instanceof ArgumentException)
            {
                // TODO: Expose it in contract.
            }
            else if (ex instanceof ArgumentNullException)
            {
                ArgumentNullException err = new ArgumentNullException();
                throw new ITestServiceEchoFaultArgumentNullExceptionFaultFaultMessage(
                        "Testing fault.", err);
            }
            else
            {
                org.datacontract.schemas._2004._07.system.Exception err = new org.datacontract.schemas._2004._07.system.Exception();
                throw new ITestServiceEchoFaultExceptionFaultFaultMessage("Testing fault.", err);
            }
        }

        ComputerInfo info;
        try
        {
            info = echo(refID);
        }
        catch (Exception e)
        {
            info = new ComputerInfo();
        }
        return info;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoWithDelay(java.lang.Integer refID
     * ,)javax.xml.datatype.Duration delay )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoWithDelay(
            java.lang.Integer refID, javax.xml.datatype.Duration delay)
            throws ITestServiceEchoWithDelayAuthenticationFailureFaultFaultMessage,
            ITestServiceEchoWithDelayRetryOperationErrorFaultFaultMessage
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoWithDelay");

        try
        {
            System.out.println("Start call " + refID.toString());
            Thread.sleep((long) delay.getTimeInMillis(new Date()));
            return echo(refID);
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.tempuri.ITestService#generateLoadWithResponseData(java.lang.Integer
     * refID ,)javax.xml.datatype.Duration sleepTime ,)byte[] inputData
     * ,)java.lang.Integer outputDataSize )*
     */
    public org.datacontract.schemas._2004._07.services.StatisticInfo generateLoadWithResponseData(
            java.lang.Integer refID, javax.xml.datatype.Duration sleepTime, byte[] inputData,
            java.lang.Integer outputDataSize)
    {
        ServiceContext.Logger.traceEvent(Level.ALL,
                "Executing operation generateLoadWithResponseData");

        try
        {
            StatisticInfo info = new StatisticInfo();
            info.setRefID(refID);
            info.setStartTime(Utility.getXMLCurrentTime());
            if (inputData != null)
            {
                for (byte b : inputData)
                {
                    System.out.print(b);
                }
            }
            Thread.sleep(sleepTime.getTimeInMillis(new Date()));

            String instanceid = System.getenv(EnvVarNames.CCP_TASKINSTANCEID);
            String taskid = System.getenv(EnvVarNames.CCP_TASKID);
            if (Utility.isNullOrEmpty(instanceid))
                instanceid = "0";
            if (Utility.isNullOrEmpty(taskid))
                taskid = "0";

            if (instanceid.equals("0"))
                info.setInstanceId(svcObjFact.createStatisticInfoInstanceId(taskid));
            else
                info.setInstanceId(svcObjFact.createStatisticInfoInstanceId(taskid + "."
                        + instanceid));
            info.setEndTime(Utility.getXMLCurrentTime());

            return info;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#lastTime(java.lang.Integer millisec )*
     */
    public javax.xml.datatype.XMLGregorianCalendar lastTime(java.lang.Integer millisec)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation lastTime");

        try
        {
            Thread.sleep((long) millisec);
            return Utility.getXMLCurrentTime();
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#generateLoad(java.lang.Integer refID
     * ,)java.lang.Long millisec ,)byte[] inputData ,)java.lang.String
     * commonDataPath )*
     */
    public org.datacontract.schemas._2004._07.services.StatisticInfo generateLoad(
            java.lang.Integer refID, java.lang.Long millisec, byte[] inputData,
            java.lang.String commonDataPath)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation generateLoad");
        try
        {
            StatisticInfo info = new StatisticInfo();
            info.setRefID(refID);
            info.setStartTime(Utility.getXMLCurrentTime());
            GregorianCalendar endTime = new GregorianCalendar();
            endTime.add(GregorianCalendar.MILLISECOND, millisec.intValue());

            if (!Utility.isNullOrEmpty(commonDataPath))
            {
                // Unmigratable.
            }

            if (inputData != null)
            {
                for (byte b : inputData)
                {
                    System.out.print(b);
                }
            }

            while (endTime.after(new GregorianCalendar()))
            {
            }

            String instanceid = System.getenv(EnvVarNames.CCP_TASKINSTANCEID);
            String taskid = System.getenv(EnvVarNames.CCP_TASKID);
            if (Utility.isNullOrEmpty(instanceid))
                instanceid = "0";
            if (Utility.isNullOrEmpty(taskid))
                taskid = "0";

            if (instanceid.equals("0"))
                info.setInstanceId(svcObjFact.createStatisticInfoInstanceId(taskid));
            else
                info.setInstanceId(svcObjFact.createStatisticInfoInstanceId(taskid + "."
                        + instanceid));
            info.setEndTime(Utility.getXMLCurrentTime());

            return info;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#consumeCPU(javax.xml.datatype.Duration time
     * )*
     */
    public java.lang.String consumeCPU(javax.xml.datatype.Duration time)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation consumeCPU");
        try
        {
            Pi PI = new Pi();
            PI.echo();
            return Pi.calculatePi(time.getTimeInMillis(new Date()));
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoAppSettings(java.lang.Integer refID )*
     */
    public com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfKeyValueOfstringstring echoAppSettings(
            java.lang.Integer refID)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoAppSettings");
        try
        {
            com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfKeyValueOfstringstring _return = new com.microsoft.schemas._2003._10.serialization.arrays.ArrayOfKeyValueOfstringstring();
            return _return;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.tempuri.ITestService#echoObject4(org.datacontract.schemas._2004._07
     * .services.ClassObj obj )*
     */
    public org.datacontract.schemas._2004._07.services.ClassObj echoObject4(
            org.datacontract.schemas._2004._07.services.ClassObj obj)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoObject4");
        try
        {
            ClassObj _return = new ClassObj();

            _return.setO(obj.getO());
            _return.setType(obj.getType());

            return _return;
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echo(java.lang.Integer refID )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echo(java.lang.Integer refID)
            throws ITestServiceEchoAuthenticationFailureFaultFaultMessage,
            ITestServiceEchoRetryOperationErrorFaultFaultMessage
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echo");

        TestStruct ts = new TestStruct();
        ts.setD(2d);
        ts.setF(3f);
        ts.setI64(4l);
        ts.setI321(1);
        ts.setI322(2);
        ts.setS(svcObjFact.createTestStructS(""));

        ComputerInfo info = new ComputerInfo();
        info.setRefID(refID);
        String machineName;
        try
        {
            machineName = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            machineName = "";
        }
        info.setName(svcObjFact.createComputerInfoName(machineName));
        info.setJobID(jobid);
        info.setTaskID(taskid);
        info.setScheduler(svcObjFact.createComputerInfoScheduler(scheduler));

        try
        {
            info.setCallIn(Utility.getXMLCurrentTime());
        }
        catch (DatatypeConfigurationException e1)
        {
            e1.printStackTrace();
            System.exit(1);
        }

        info.setTs(ts);

        String username = System.getProperty("user.name");
        info.setRunAsUser(svcObjFact.createComputerInfoRunAsUser(username));

        info.setOnExitCalled(false);

        Map<String, String> envMap = System.getenv();
        List<KeyValueOfstringstring> envList = new ArrayList<KeyValueOfstringstring>();
        for (String envName : envMap.keySet())
        {
            KeyValueOfstringstring entry = new KeyValueOfstringstring();
            entry.setKey(envName);
            entry.setValue(envMap.get(envName));
            envList.add(entry);
            if (envName.compareToIgnoreCase(EnvVarNames.NON_TERMINATING_ERROR_RETRY_COUNT) == 0)
            {
                if (NonTerminatingErrorRetryCount < Integer.parseInt(entry.getValue()))
                {
                    NonTerminatingErrorRetryCount++;
                    System.out.format("Throw NonTerminatingErrorRetryCount times: %d%n",
                            NonTerminatingErrorRetryCount);

                    throw Utility.BuildRetryOperationError("test",
                            String.valueOf(NonTerminatingErrorRetryCount));
                }
            }
        }

        String WriteFileTest = System.getenv(EnvVarNames.WRITE_FAIL_TEST);
        if (!Utility.isNullOrEmpty(WriteFileTest))
        {
            try
            {
                for (String file : WriteFileTest.split(";"))
                {
                    System.out.format("Begin to write file %s%n", file);
                    FileWriter writer = new FileWriter(new File(file), true);
                    writer.close();
                }
                for (String file : WriteFileTest.split(";"))
                {
                    System.out.format("Begin to delete file %s%n", file);
                    File f = new File(file);
                    f.delete();
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
                throw Utility.BuildRetryOperationError(e.toString());
            }
        }
        System.out.format("Called %d%n", refID);

        return info;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#echoException(java.lang.Integer refID
     * ,)org.datacontract.schemas._2004._07.system.Exception ex )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo echoException(
            java.lang.Integer refID, org.datacontract.schemas._2004._07.system.Exception ex)
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation echoException");

        try
        {
            org.datacontract.schemas._2004._07.services.ComputerInfo _return = new org.datacontract.schemas._2004._07.services.ComputerInfo();
            return _return;
        }
        catch (java.lang.Exception exc)
        {
            exc.printStackTrace();
            throw new RuntimeException(exc);
        }
    }

    class EchoWithOnExitHandler implements ExitEventListener
    {
        private long         exitDelay;
        private String       logPath;
        private int          refID;
        private ComputerInfo info;

        EchoWithOnExitHandler(long delay, String logPath, int refID, ComputerInfo info)
        {
            this.exitDelay = delay;
            this.logPath = logPath;
            this.refID = refID;
            this.info = info;
        }

        @Override
        public void OnExiting(Sender sender, SOAEventArg soaEventArg)
        {
            try
            {
                Thread.sleep(exitDelay);
                String onAzureEnv = System.getenv("CCP_OnAzure");
                if (!Utility.isNullOrEmpty(onAzureEnv) && !onAzureEnv.equals("1")
                        && Utility.isNullOrEmpty(logPath))
                {
                    String taskInfo = String.format("%s.%s.%s",
                            System.getenv(EnvVarNames.CCP_JOBID),
                            System.getenv(EnvVarNames.CCP_TASKID),
                            System.getenv(EnvVarNames.CCP_TASKINSTANCEID));
                    writeLog(logPath + "\\CCP_AITest_Trace_" + String.valueOf(jobid), refID,
                            "[Request] %s%%%s%%Svchost called.", Utility.getCurrentTime(), taskInfo);
                }
                System.out.format("[Exit] %s: GracefulExitEvent called.%n",
                        Utility.getCurrentTime());
                info.setOnExitCalled(true);
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }

    static class DefaultOnExitHandler implements ExitEventListener
    {
        private File logFile;

        DefaultOnExitHandler(File logFile)
        {
            this.logFile = logFile;
        }

        public void OnExiting(Sender sender, SOAEventArg soaEventArg)
        {
            String onAzureEnv = System.getenv("CCP_OnAzure");
            if (!Utility.isNullOrEmpty(onAzureEnv) && !onAzureEnv.equals("1"))
            {
                PrintWriter writer = null;
                try
                {
                    writer = new PrintWriter(new FileWriter(logFile, true));
                }
                catch (Exception e)
                {
                    throw new RuntimeException(e);
                }
                String envs = String.format("%s.%s.%s", System.getenv(EnvVarNames.CCP_JOBID),
                        System.getenv(EnvVarNames.CCP_TASKID),
                        System.getenv(EnvVarNames.CCP_TASKINSTANCEID));
                writer.format("[Exit] %s%%%s%%GracefulExitEvent called.%n",
                        Utility.getCurrentTime(), envs);
                writer.close();
            }
            System.out.format("[Exit] %s: GracefulExitEvent called.%n", Utility.getCurrentTime());
            return;
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ITestService#getCommonData(java.lang.Integer refID
     * ,)javax.xml.datatype.Duration sleepBeforeGet
     * ,)javax.xml.datatype.Duration sleepAfterGet ,)java.lang.String
     * dataClientId ,)java.lang.String expectedMd5Hash ,)java.lang.Integer
     * testActionId )*
     */
    public org.datacontract.schemas._2004._07.services.ComputerInfo getCommonData(
            java.lang.Integer refID, javax.xml.datatype.Duration sleepBeforeGet,
            javax.xml.datatype.Duration sleepAfterGet, java.lang.String dataClientId,
            java.lang.String expectedMd5Hash, java.lang.Integer testActionId)
            throws ITestServiceGetCommonDataCommonDataErrorFaultFaultMessage
    {
        ServiceContext.Logger.traceEvent(Level.ALL, "Executing operation getCommonData");
        try
        {
            switch(testActionId)
            {
            case Read_Raw_Bytes:
                long sleepTime = (long) sleepBeforeGet.getTimeInMillis(new Date());
                Thread.sleep(sleepTime);

                System.out.format("%s: %d: Try to read raw common data for DataClient: %s\n", Utility.getCurrentTime(), refID, dataClientId);
                try
                {
                    DataClient dataClient = ServiceContext.getDataClient(dataClientId);
                    byte[] data = dataClient.readRawBytesAll();

                    // Verify
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    byte[] md5Bytes = md.digest(data);
                    String commonDataMd5Hash = "";
                    for (byte b : md5Bytes)
                    {
                        commonDataMd5Hash += String.format("%02X", b);
                    }
                    if (!commonDataMd5Hash.equalsIgnoreCase(expectedMd5Hash))
                    {
                        String output = String.format("Corrupted common data in content. Expected md5: %s, actual md5: %s", expectedMd5Hash, commonDataMd5Hash);
                        System.out.println(output);
                        throw new Exception(output);
                    }
                    
                    System.out.format("%s: %d: Common data for DataClient: %s validated", Utility.getCurrentTime(), refID, dataClientId);
                    dataClient.close();
                }

                catch (Exception e)
                {
                    boolean fileAccessable = false;
                    try
                    {
                        String path = System.getenv("HPC_RUNTIMESHARE");
                        if (!Utility.isNullOrEmpty(path))
                        {
                            path += "\\Data";
                            path += "\\" + String.valueOf(hashString(dataClientId));
                        }
                        System.out.println(path);
                        fileAccessable = (new File(path)).exists();
                    }
                    catch (Exception e_alt)
                    {
                        // swallow
                    }
                    String errmsg = String.format("%s: %d: Unexpected exception thrown when reading data: %s\n", Utility.getCurrentTime(), refID, e.toString());
                    throw new Exception(String.format("ErrMsg: %s\nOutput: %s\nFileAccessable: %s", errmsg, e.getMessage(), String.valueOf(fileAccessable)));
                }
                return echoWithDelay(refID, sleepAfterGet);
            case READ_AccessDenied:
            case READ_AccessDenied_ReadBytes:
            case No_Read_PerReq:
            case No_Read_Raw_PerReq:
            case Default:
            default:
                // unimplemented due to API difference
                return null;
            }
        }
        catch (java.lang.Exception ex)
        {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        // throw new
        // ITestServiceGetCommonDataCommonDataErrorFaultFaultMessage("ITestService_GetCommonData_CommonDataErrorFault_FaultMessage...");
    }
    
    private static int hashString(String str)
    {
        final int MaxSubDirectoryCount = 1024;
        int hashValue = 0;
        for (int i = 0; i < str.length(); i++)
        {
            hashValue = hashValue * 37 + str.charAt(i);
        }

        hashValue = Math.abs(hashValue);

        return hashValue % MaxSubDirectoryCount;
    }

    @Override
    public String checkACLOnAzure()
    {
        // TODO Auto-generated method stub
        return null;
    }
    
    private ComputerInfo buildComputerInfo(int refID)
    {
        TestStruct ts = new TestStruct();
        ts.setD((double) 2);
        ts.setF((float)3);
        ts.setI64((long) 4);
        ts.setI321(1);
        ts.setI322(2);
        ts.setS(svcObjFact.createTestStructS(""));
        
        ComputerInfo info = new ComputerInfo();
        info.setRefID(refID);
        String machineName;
        try
        {
            machineName = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            machineName = "";
        }
        info.setName(svcObjFact.createComputerInfoName(machineName));
        info.setJobID(jobid);
        info.setTaskID(taskid);
        info.setScheduler(svcObjFact.createComputerInfoScheduler(scheduler));

        try
        {
            info.setCallIn(Utility.getXMLCurrentTime());
        }
        catch (DatatypeConfigurationException e1)
        {
            e1.printStackTrace();
            System.exit(1);
        }
        info.setTs(ts);
        return info;
    }

    
    private class TraceDataObj {
        private String s;
        public TraceDataObj(String value) {
            s = value;
        }
        
        public String toString() {
            return s;
        }
    }

}
